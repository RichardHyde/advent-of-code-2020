<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>Diff</key>
	<array>
		<dict>
			<key>ModifiedContent</key>
			<string>import Foundation

enum DataError: Error {
    case invalidData(String)
    case invalidMinimum(String)
    case invalidMaximum(String)
    
}

struct PasswordPolicy {
    let min: Int
    let max: Int
    let letter: Character
    
    init(min: Int, max: Int, letter: Character) {
        self.min = min
        self.max = max
        self.letter = letter
    }
}

struct Password {
    let policy: PasswordPolicy
    let password: String
    
    init(data: String) throws {
        var splitCharacters = CharacterSet.whitespaces
        splitCharacters.formUnion(.punctuationCharacters)
        
        let dataParts = data.components(separatedBy: splitCharacters).filter({ $0.count &gt; 0 })
        
        guard dataParts.count == 4 else { throw DataError.invalidData(data)  }
        guard let min = Int(dataParts[0]) else { throw DataError.invalidMinimum(dataParts[0]) } 
        guard let max = Int(dataParts[1]) else { throw DataError.invalidMaximum(dataParts[1]) }
        
        self.policy = PasswordPolicy(min: min, max: max, letter: dataParts[2].first!)
        self.password = dataParts[3]
    }
    
    // Number of instances of the policy letter in the password must be between the min and max values
    func isValidPuzzle1() -&gt; Bool {
        let characterCount = self.password.filter({ $0 == self.policy.letter }).count
        
        return characterCount &gt;= self.policy.min &amp;&amp; characterCount &lt;= self.policy.max
    }
    
    // Either character at the positions in the password of the policy min and max value must match the policy letter, but not both
    func isValidPuzzle2() -&gt; Bool {
        let charAtMinPosition = self.password[String.Index(encodedOffset: self.policy.min-1)]
        let charAtMaxPosition = self.password[String.Index(encodedOffset: self.policy.max-1)]
        
        return [charAtMinPosition, charAtMaxPosition].filter({ $0 == self.policy.letter }).count == 1
    }
}

do {
    // MARK: Load the passwords and policy data
    let data = try String(contentsOf: #fileLiteral(resourceName: "Passwords.txt.txt"))
    let passwords = try data.split(separator: "\n").map { try Password(data:$0.trimmingCharacters(in: .whitespacesAndNewlines)) }
    
    // MARK: Puzzle 1 Count
    var validPasswords = passwords.filter { $0.isValidPuzzle1() }
    print("\(validPasswords.count ?? 0) Valid passwords for puzzle 1")
    
    // MARK: Puzzle 2 Count
    validPasswords = passwords.filter { $0.isValidPuzzle2() }
    print("\(validPasswords.count ?? 0) Valid passwords for puzzle 2")
    
} catch DataError.invalidData(let data) {
        print("Invalid Data \(data)")
} catch DataError.invalidMinimum(let minimum) {
    print("Invalid Minimum \(minimum)")
} catch DataError.invalidMaximum(let maximum) {
    print("Invalid Maximum \(maximum)")
} catch {
    print("Error \(error)")
}


</string>
			<key>ModifiedRange</key>
			<string>{1, 2835}</string>
			<key>OriginalContent</key>
			<string></string>
			<key>OriginalRange</key>
			<string>{1, 0}</string>
		</dict>
	</array>
	<key>File</key>
	<string>Chapters/Chapter1.playgroundchapter/Pages/My Playground.playgroundpage/main.swift</string>
</dict>
</plist>
